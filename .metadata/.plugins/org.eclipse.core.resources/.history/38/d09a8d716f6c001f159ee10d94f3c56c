package com.example.socialapp.Controller;

import java.util.List;
import java.util.Optional;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.socialapp.Models.User;
import com.example.socialapp.Repository.UserRepository;

@RestController
@CrossOrigin(origins = "*")
public class UserController {
	
	private final UserRepository userRepository;
	
	public UserController(UserRepository userRepository) {
		this.userRepository = userRepository;
	}

	@PostMapping("/users")
	public User createUser(@RequestBody User user) {
		User saveUser = new User();
		saveUser.setId(user.getId());
		saveUser.setFirstName(user.getFirstName());
		saveUser.setLastName(user.getLastName());
		saveUser.setEmail(user.getEmail());
		saveUser.setPassword(user.getPassword());
		
		User savedUser = this.userRepository.save(saveUser);
		
		return savedUser;
	}
	
	@GetMapping("/users")
	public List<User> getAllUsers(){
		return this.userRepository.findAll();
	}
	
	@GetMapping("/users/{id}")
	public User getUserById(@PathVariable(name = "id") Integer id) throws Exception {
		Optional<User> user = this.userRepository.findById(id);
		if(user.isPresent())
			return user.get();
		
		throw new Exception("Not found user have id = " + id);
	}
	
	@PutMapping("/users")
	public User updateAUser(@RequestBody User user) throws Exception{
		Optional<User> updateUser = this.userRepository.findById(user.getId());
		
		if(updateUser.isPresent()) {
			User userAfterUpdate = updateUser.get();
			
			userAfterUpdate.setFirstName(user.getFirstName());
			userAfterUpdate.setLastName(user.getLastName());
			userAfterUpdate.setEmail(user.getEmail());
			return this.userRepository.save(userAfterUpdate);
		}
		
		else {
			throw new Exception("User with id = " + user.getId() + " is not found");
		}
	}
	
	@DeleteMapping("/users/{id}")
	public String deleteUser(@PathVariable(name = "id") Integer id) throws Exception {
		
		Optional<User> currentUser = this.userRepository.findById(id);
		
		if(currentUser.isPresent()) {
			this.userRepository.deleteById(currentUser.get().getId());
			return "Remove user have id = " + id + " success!";
			
		}
		else {
			throw new Exception("User have id = " + id + " not found!");
		}
		
	
		
	}
	
	
}
